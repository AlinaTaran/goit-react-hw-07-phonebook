{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Container/Container.module.css","components/Container/Container.js","redux/contact/contacts-actions.js","redux/contact/contacts-operation.js","redux/contact/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","App.js","redux/contact/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","children","className","s","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","post","deleteContact","id","delete","getContacts","state","contacts","items","getFilter","filter","filteredContacts","normalizedContact","toLowerCase","includes","ContactForm","useForm","register","handleSubmit","errors","reset","control","useSelector","contactsSelectors","useDispatch","form","onSubmit","existName","nameNormalized","find","isExistName","alert","contactsOperations","label","input","ref","minLength","value","message","maxLength","required","type","as","InputMask","rules","defaultValue","placeholder","mask","button","Filter","length","onChange","event","contactsActions","target","ContactItem","onClick","ContactsList","visibleContacts","useEffect","map","App","ContactList","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ce36e75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__y7xhh\",\"button\":\"ContactForm_button__3D6y1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__1ctzm\"};","import PropTypes from 'prop-types';\r\nimport s from './Container.module.css';\r\n\r\nconst Container = ({ children }) => (\r\n  <div className={s.Container}>{children}</div>\r\n);\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Container;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n  addContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  deleteContactRequest,\r\n  deleteContactError,\r\n  deleteContactSuccess,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (name, number) => async dispatch => {\r\n  const contact = { name, number };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nexport const deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n","// import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const filteredContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedContact = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedContact),\r\n  );\r\n};\r\n","import { useForm, Controller } from 'react-hook-form';\r\nimport InputMask from 'react-input-mask';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contact';\r\nimport s from './ContactForm.module.css';\r\n\r\nfunction ContactForm() {\r\n  const { register, handleSubmit, errors, reset, control } = useForm();\r\n\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const isExistName = existName => {\r\n    const nameNormalized = existName.toLowerCase();\r\n    return contacts.find(({ name }) => name.toLowerCase() === nameNormalized);\r\n  };\r\n\r\n  const submitHandler = ({ name, number }) => {\r\n    const sameName = isExistName(name);\r\n\r\n    if (sameName) {\r\n      alert(`${name} is already in your phonebook`);\r\n    } else {\r\n      dispatch(contactsOperations.addContact(name, number));\r\n    }\r\n\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit(submitHandler)}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          className={s.input}\r\n          name=\"name\"\r\n          ref={register({\r\n            minLength: { value: 2, message: 'Too short name' },\r\n            maxLength: { value: 20, message: 'Too long name' },\r\n            required: 'Is a required field',\r\n          })}\r\n          type=\"text\"\r\n        />\r\n        {errors.name && <p className={s.errors}>{errors.name.message}</p>}\r\n      </label>\r\n\r\n      <label>\r\n        Number\r\n        <Controller\r\n          as={InputMask}\r\n          name=\"number\"\r\n          rules={{\r\n            required: 'Phone number is required',\r\n          }}\r\n          defaultValue=\"\"\r\n          control={control}\r\n          className={s.input}\r\n          placeholder=\"+38 (___) ___-__-__\"\r\n          mask=\"+38 (999) 999-99-99\"\r\n        />\r\n        {errors.number && <p className={s.errors}>{errors.number.message}</p>}\r\n      </label>\r\n\r\n      <button className={s.button} type=\"submit\">\r\n        Add to contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsSelectors, contactsActions } from 'redux/contact';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n\r\n  return (\r\n    <>\r\n      {contacts.length > 1 && (\r\n        <label>\r\n          Find contact by name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={value}\r\n            onChange={event =>\r\n              dispatch(contactsActions.changeFilter(event.target.value))\r\n            }\r\n          />\r\n        </label>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst ContactItem = ({ name, number, onClick }) => {\r\n  return (\r\n    <li>\r\n      <p>\r\n        {name}: {number}\r\n      </p>\r\n      <button onClick={onClick}>Delete</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import PropTypes from 'prop-types';\r\nimport { useEffect } from 'react';\r\nimport ContactItem from '../ContactItem/ContactItem';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contact';\r\n\r\nconst ContactsList = () => {\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const dispatch = useDispatch();\r\n  const visibleContacts = useSelector(contactsSelectors.filteredContacts);\r\n\r\n  \r\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      {contacts.length > 0 ? (\r\n        <ul>\r\n          {visibleContacts.map(({ id, name, number }) => (\r\n            <ContactItem\r\n              key={id}\r\n              name={name}\r\n              number={number}\r\n              onClick={() => dispatch(contactsOperations.deleteContact(id))}\r\n            />\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No contacts have been added to your phonebook</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default ContactsList;\r\n","import Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nfunction App() {\n  return (\n    <Container>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  deleteContactRequest,\r\n  changeFilter,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","import contactsReducer from './contact/contacts-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport logger from 'redux-logger';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}